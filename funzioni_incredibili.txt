def poincare_map(novs):
    delay = np.diff(novs)
    delay = np.array([i for i in delay if i!=1])
    interevent_times = np.array([i-1 for i in delay])
    unique = np.unique(interevent_times)
    list_of_sequels = np.zeros((len(unique),3))
    for idx,element in  enumerate(unique[:]):
        support = []
        list_of_sequels[idx][0] = element
        for idx2,element2 in enumerate(interevent_times[:-1]):
            if(element2 == element):
                support.append(interevent_times[idx2+1])
        support = np.array(support)
        list_of_sequels[idx][1] = np.mean(support)
        list_of_sequels[idx][2] = np.std(support)
    return list_of_sequels
            
def delays(novelties,flag):
    delay = np.diff(novelties)
    delay = np.array([i for i in delay if i!=1])
    delay = np.array([i-1 for i in delay])
    if(flag == True):
        return np.log(delay)
    else:
        return delay
        
def decomposing_the_curve(type_of_words,novelties,logged_bins,flag):
    type_of_words_binned = []
    for i in range(0,len(novelties)-1):
        support = np.array([k for k in type_of_words[int(novelties[i]):int(novelties[i+1])-1]])
        type_of_words_binned.append(support)
    type_of_words_binned = np.array([i for i in type_of_words_binned if len(i)])
    new_delays = []
    for i in type_of_words_binned:
        new_delays.append(len(i))
    new_delays = np.unique(np.array(new_delays))
    counts_for_each_delay=np.zeros((len(new_delays),3))
    for j in range(0,len(new_delays)):
        counts_for_each_delay[j][0] = new_delays[j]
      #  counts_for_each_delay[j][0] = delays_unique[j-1]
        for i in type_of_words_binned:
            if (len(i) == new_delays[j]):
                counts_for_each_delay[j][1]+=(np.count_nonzero(i==4))/(len(i))
                counts_for_each_delay[j][2]+=(np.count_nonzero(i==5))/(len(i))
    counts_for_each_delay_logs = counts_for_each_delay
    for i in range(0,len(counts_for_each_delay_logs)-1):
        counts_for_each_delay_logs[i][0] = np.log(counts_for_each_delay[i][0])
    finale = np.zeros((len(logged_bins),3))
    for i in range(0,len(logged_bins)-1):
        finale[i][0] = logged_bins[i]
        for j in range(0,len(counts_for_each_delay_logs)):
            if(counts_for_each_delay_logs[j][0]>=logged_bins[i] and counts_for_each_delay_logs[j][0]<logged_bins[i+1]):
                finale[i][1]+=counts_for_each_delay_logs[j][1]
                finale[i][2]+=counts_for_each_delay_logs[j][2]
    if(flag == True):
        return finale
    else:
        return counts_for_each_delay
    
def zipf_decomposition(sequence,type_):
    synthesis = np.unique(sequence,return_counts=True)
    idxs_sorting = np.argsort(synthesis[1])
    four= np.zeros(len(synthesis[1]))
    five= np.zeros(len(synthesis[1]))
    novs= np.zeros(len(synthesis[1]))
    for idx_1,j in enumerate(idxs_sorting):
        for idx_2,k in enumerate(sequence):
            if synthesis[0][j]==k:
                if(type_[idx_2] == 4):
                    four[idx_1]+=1
                elif(type_[idx_2] == 5):
                    five[idx_1]+=1
                else:
                    novs[idx_1]+=1
    return four[::-1],five[::-1],novs[::-1]
    
    

plt.figure(figsize=(15,10), dpi= 80)
colors = [plt.cm.Spectral(i/float(len(log_interevent_binned)-1)) for i in range(len(log_interevent_binned))]
n, bins, patches = plt.hist(log_interevent_binned, 35, stacked=True, density=False, color=colors[:len(log_interevent_binned)])
#plt.figure(figsize=(9, 1.5))
#fig, ax = plt.subplots(1, 1)
#ax = fig.add_axes([0.05, 0.80, 0.9, 0.1])
colbar = plt.colorbar(ax.imshow(s,cmap='Spectral'))
colbar.set_label('time')
#fig, ax = plt.subplots(1, 1)
plt.xlabel('ln(Delays)',fontsize = 15)
plt.ylabel('Frequency',fontsize = 15)
#fraction = 3  # .05

#norm = mpl.colors.Normalize(vmin=0, vmax=200000)
#cbar = ax.figure.colorbar(
#            mpl.cm.ScalarMappable(norm=norm, cmap='Spectral'),
#            ax=ax, pad=.05, extend='both', fraction=fraction,orientation='horizontal')

#ax.axis('off')
#plt.savefig('colorbar_0242_beta_best.png')
plt.show()


def binomial_coeff_lists(lmax):
    b_c = [[Decimal(0) for i in range(lmax)] for j in range(lmax) ]
    for j in range(0,lmax):
        b_c[j][0] = Decimal(1)
        b_c[0][j] = Decimal(1)
        b_c[j][j] = Decimal(1)
    for k in range(1,lmax):
        for s in range(1,k):
            b_c[k][s] = Decimal(b_c[k-1][s]) + Decimal(b_c[k-1][s-1])
    return b_c
def binomial_coeff(lmax):
    b_c = np.zeros((lmax,lmax))
    for j in range(0,lmax):
        b_c[j][0] = 1
        b_c[0][j] = 1
        b_c[j][j] = 1
    for k in range(1,lmax):
        for s in range(1,k):
            b_c[k][s] = b_c[k-1][s] + b_c[k-1][s-1]
    return b_c
def coeffs2_prova(lmax,nu,rho,tmax,tmin):
    const = (nu/rho)*((rho-nu)**(nu/rho))
    gamma = 1-nu/rho
    terms = [1 for j in range(0,lmax)]
    b_c = binomial_coeff_lists(lmax)
    for idx,i in enumerate(terms):
        norm = (Decimal(gamma)*(Decimal(idx)+Decimal(1))-Decimal(1))*(Decimal(tmax)-Decimal(tmin))
        times = Decimal(tmin)**((-Decimal(gamma)*(Decimal(idx+1)))+1)-Decimal(tmax)**((-Decimal(gamma)*(Decimal(idx+1)))+1)
        terms[idx]=(((-1)**(idx))*(Decimal(const)**(Decimal(idx))+1))*Decimal(times)/norm
        for s in range(idx,lmax):
            b_c[s][idx] = Decimal(terms[idx])*Decimal(b_c[s][idx])
        #print(l-1,idx)
    return b_c

    
 
